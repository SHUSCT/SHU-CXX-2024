include(${CMAKE_CURRENT_LIST_DIR}/Logging.cmake)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

shucxx2024_log_info("CMAKE_CXX_STANDARD: ${CMAKE_CXX_STANDARD}")
shucxx2024_log_info("CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
shucxx2024_log_info("CMAKE_CXX_COMPILER_VERSION: ${CMAKE_CXX_COMPILER_VERSION}")

if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_definitions("SHUCXX2024_COMPILER_MSVC")
    add_compile_options(/permissive- /Zc:forScope)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Zi")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_compile_definitions("SHUCXX2024_COMPILER_CLANG")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    add_compile_definitions("SHUCXX2024_COMPILER_GNU")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
else()
    log_fatal("Unsupported compiler")
endif()

string(REPLACE "." ";" SHUCXX2024_COMPILER_VERSION_LIST ${CMAKE_CXX_COMPILER_VERSION})
list(GET SHUCXX2024_COMPILER_VERSION_LIST 0 SHUCXX2024_COMPILER_MAJOR_VERSION)
list(GET SHUCXX2024_COMPILER_VERSION_LIST 1 SHUCXX2024_COMPILER_MINOR_VERSION)
list(GET SHUCXX2024_COMPILER_VERSION_LIST 2 SHUCXX2024_COMPILER_PATCH_VERSION)

add_compile_definitions("SHUCXX2024_COMPILER_MAJOR_VERSION=${SHUCXX2024_COMPILER_MAJOR_VERSION}")
add_compile_definitions("SHUCXX2024_COMPILER_MINOR_VERSION=${SHUCXX2024_COMPILER_MINOR_VERSION}")
add_compile_definitions("SHUCXX2024_COMPILER_PATCH_VERSION=${SHUCXX2024_COMPILER_PATCH_VERSION}")